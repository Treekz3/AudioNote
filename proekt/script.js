document.addEventListener('DOMContentLoaded', () => {
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const recordButton = document.getElementById('recordButton');
    const timerDisplay = document.getElementById('timer');
    const audioPlayback = document.getElementById('audioPlayback');
    const noteTagsInput = document.getElementById('noteTags');
    const reminderDateInput = document.getElementById('reminderDate');
    const saveNoteBtn = document.getElementById('saveNoteBtn');
    const searchInput = document.getElementById('searchInput');
    const dateFilter = document.getElementById('dateFilter');
    const notesList = document.getElementById('notesList');
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let mediaRecorder;
    let audioChunks = [];
    let recordingStartTime;
    let timerInterval;
    let notes = JSON.parse(localStorage.getItem('audioNotes')) || [];
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initDateFilter();
    renderNotes();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    recordButton.addEventListener('click', toggleRecording);
    saveNoteBtn.addEventListener('click', saveNote);
    searchInput.addEventListener('input', () => renderNotes(searchInput.value));
    dateFilter.addEventListener('change', () => renderNotes(searchInput.value, dateFilter.value));
    
    // –§—É–Ω–∫—Ü–∏–∏
    
    function initDateFilter() {
        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –∑–∞–º–µ—Ç–æ–∫
        const dates = [...new Set(notes.map(note => {
            const date = new Date(note.timestamp);
            return date.toISOString().split('T')[0];
        }))].sort((a, b) => new Date(b) - new Date(a));
        
        // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
        dateFilter.innerHTML = '<option value="all">–í—Å–µ –¥–∞—Ç—ã</option>';
        dates.forEach(date => {
            const option = document.createElement('option');
            option.value = date;
            option.textContent = new Date(date).toLocaleDateString();
            dateFilter.appendChild(option);
        });
    }
    
    function toggleRecording() {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
            stopRecording();
        } else {
            startRecording();
        }
    }
    
    async function startRecording() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            
            mediaRecorder.ondataavailable = event => {
                audioChunks.push(event.data);
            };
            
            mediaRecorder.onstop = () => {
                const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                const audioUrl = URL.createObjectURL(audioBlob);
                audioPlayback.src = audioUrl;
                audioPlayback.style.display = 'block';
                saveNoteBtn.disabled = false;
            };
            
            audioChunks = [];
            mediaRecorder.start();
            recordButton.textContent = '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å';
            recordButton.classList.add('recording');
            
            // –¢–∞–π–º–µ—Ä
            recordingStartTime = Date.now();
            timerInterval = setInterval(updateTimer, 1000);
            updateTimer();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
        }
    }
    
    function stopRecording() {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
            mediaRecorder.stop();
            clearInterval(timerInterval);
            recordButton.textContent = 'üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å';
            recordButton.classList.remove('recording');
            
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ—Ç–æ–∫–∞
            mediaRecorder.stream.getTracks().forEach(track => track.stop());
        }
    }
    
    function updateTimer() {
        const elapsedTime = Math.floor((Date.now() - recordingStartTime) / 1000);
        const minutes = Math.floor(elapsedTime / 60).toString().padStart(2, '0');
        const seconds = (elapsedTime % 60).toString().padStart(2, '0');
        timerDisplay.textContent = `${minutes}:${seconds}`;
    }
    
    function saveNote() {
        if (!audioChunks.length) return;
        
        const tags = noteTagsInput.value
            .split(',')
            .map(tag => tag.trim())
            .filter(tag => tag.length > 0);
        
        const reminder = reminderDateInput.value ? new Date(reminderDateInput.value).getTime() : null;
        
        const newNote = {
            id: Date.now().toString(),
            timestamp: Date.now(),
            audioUrl: audioPlayback.src,
            tags,
            reminder
        };
        
        notes.unshift(newNote);
        saveNotesToLocalStorage();
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        audioChunks = [];
        audioPlayback.style.display = 'none';
        audioPlayback.src = '';
        noteTagsInput.value = '';
        reminderDateInput.value = '';
        saveNoteBtn.disabled = true;
        timerDisplay.textContent = '00:00';
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        initDateFilter();
        renderNotes();
    }
    
    function saveNotesToLocalStorage() {
        localStorage.setItem('audioNotes', JSON.stringify(notes));
    }
    
    function renderNotes(searchTerm = '', dateFilterValue = 'all') {
        let filteredNotes = [...notes];
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É (—Ç–µ–≥–∞–º)
        if (searchTerm) {
            const searchTerms = searchTerm.toLowerCase().split(' ').filter(t => t);
            filteredNotes = filteredNotes.filter(note => 
                searchTerms.some(term => 
                    note.tags.some(tag => tag.toLowerCase().includes(term))
                )
            );
        }
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
        if (dateFilterValue !== 'all') {
            filteredNotes = filteredNotes.filter(note => {
                const noteDate = new Date(note.timestamp).toISOString().split('T')[0];
                return noteDate === dateFilterValue;
            });
        }
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–º–µ—Ç–æ–∫
        if (filteredNotes.length === 0) {
            notesList.innerHTML = '<div class="empty-state">–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å!</div>';
            return;
        }
        
        notesList.innerHTML = '';
        filteredNotes.forEach(note => {
            const noteElement = document.createElement('div');
            noteElement.className = 'note-card';
            
            const date = new Date(note.timestamp);
            const formattedDate = date.toLocaleString();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            let reminderElement = '';
            if (note.reminder) {
                const reminderDate = new Date(note.reminder);
                const now = new Date();
                
                if (reminderDate > now) {
                    reminderElement = `
                        <div class="note-reminder">
                            ‚è∞ ${reminderDate.toLocaleString()}
                        </div>
                    `;
                } else {
                    reminderElement = `
                        <div class="note-reminder" style="color: var(--danger-color)">
                            ‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${reminderDate.toLocaleString()}
                        </div>
                    `;
                }
            }
            
            noteElement.innerHTML = `
                <div class="note-header">
                    <div class="note-date">${formattedDate}</div>
                </div>
                
                <audio src="${note.audioUrl}" controls></audio>
                
                ${reminderElement}
                
                <div class="note-tags">
                    ${note.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                </div>
                
                <div class="note-actions">
                    <button class="action-btn delete-btn" data-id="${note.id}">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            `;
            
            notesList.appendChild(noteElement);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const noteId = e.target.getAttribute('data-id');
                deleteNote(noteId);
            });
        });
    }
    
    function deleteNote(noteId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?')) {
            notes = notes.filter(note => note.id !== noteId);
            saveNotesToLocalStorage();
            initDateFilter();
            renderNotes(searchInput.value, dateFilter.value);
        }
    }
});